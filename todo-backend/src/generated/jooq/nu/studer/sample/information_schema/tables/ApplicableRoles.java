/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.information_schema.tables;


import nu.studer.sample.information_schema.InformationSchema;
import nu.studer.sample.information_schema.tables.records.ApplicableRolesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ApplicableRoles extends TableImpl<ApplicableRolesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>information_schema.applicable_roles</code>
     */
    public static final ApplicableRoles APPLICABLE_ROLES = new ApplicableRoles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApplicableRolesRecord> getRecordType() {
        return ApplicableRolesRecord.class;
    }

    /**
     * The column <code>information_schema.applicable_roles.grantee</code>.
     */
    public final TableField<ApplicableRolesRecord, String> GRANTEE = createField(DSL.name("grantee"), nu.studer.sample.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column <code>information_schema.applicable_roles.role_name</code>.
     */
    public final TableField<ApplicableRolesRecord, String> ROLE_NAME = createField(DSL.name("role_name"), nu.studer.sample.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column <code>information_schema.applicable_roles.is_grantable</code>.
     */
    public final TableField<ApplicableRolesRecord, String> IS_GRANTABLE = createField(DSL.name("is_grantable"), nu.studer.sample.information_schema.Domains.YES_OR_NO.getDataType(), this, "");

    private ApplicableRoles(Name alias, Table<ApplicableRolesRecord> aliased) {
        this(alias, aliased, null);
    }

    private ApplicableRoles(Name alias, Table<ApplicableRolesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"applicable_roles\" as  SELECT (a.rolname)::information_schema.sql_identifier AS grantee,\n    (b.rolname)::information_schema.sql_identifier AS role_name,\n    (\n        CASE\n            WHEN m.admin_option THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS is_grantable\n   FROM ((( SELECT pg_auth_members.member,\n            pg_auth_members.roleid,\n            pg_auth_members.admin_option\n           FROM pg_auth_members\n        UNION\n         SELECT pg_database.datdba,\n            pg_authid.oid,\n            false AS bool\n           FROM pg_database,\n            pg_authid\n          WHERE ((pg_database.datname = current_database()) AND (pg_authid.rolname = 'pg_database_owner'::name))) m\n     JOIN pg_authid a ON ((m.member = a.oid)))\n     JOIN pg_authid b ON ((m.roleid = b.oid)))\n  WHERE pg_has_role(a.oid, 'USAGE'::text);"));
    }

    /**
     * Create an aliased <code>information_schema.applicable_roles</code> table
     * reference
     */
    public ApplicableRoles(String alias) {
        this(DSL.name(alias), APPLICABLE_ROLES);
    }

    /**
     * Create an aliased <code>information_schema.applicable_roles</code> table
     * reference
     */
    public ApplicableRoles(Name alias) {
        this(alias, APPLICABLE_ROLES);
    }

    /**
     * Create a <code>information_schema.applicable_roles</code> table reference
     */
    public ApplicableRoles() {
        this(DSL.name("applicable_roles"), null);
    }

    public <O extends Record> ApplicableRoles(Table<O> child, ForeignKey<O, ApplicableRolesRecord> key) {
        super(child, key, APPLICABLE_ROLES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public ApplicableRoles as(String alias) {
        return new ApplicableRoles(DSL.name(alias), this);
    }

    @Override
    public ApplicableRoles as(Name alias) {
        return new ApplicableRoles(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ApplicableRoles rename(String name) {
        return new ApplicableRoles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApplicableRoles rename(Name name) {
        return new ApplicableRoles(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
