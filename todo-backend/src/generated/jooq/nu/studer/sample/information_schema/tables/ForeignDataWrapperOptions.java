/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.information_schema.tables;


import nu.studer.sample.information_schema.InformationSchema;
import nu.studer.sample.information_schema.tables.records.ForeignDataWrapperOptionsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ForeignDataWrapperOptions extends TableImpl<ForeignDataWrapperOptionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>information_schema.foreign_data_wrapper_options</code>
     */
    public static final ForeignDataWrapperOptions FOREIGN_DATA_WRAPPER_OPTIONS = new ForeignDataWrapperOptions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ForeignDataWrapperOptionsRecord> getRecordType() {
        return ForeignDataWrapperOptionsRecord.class;
    }

    /**
     * The column
     * <code>information_schema.foreign_data_wrapper_options.foreign_data_wrapper_catalog</code>.
     */
    public final TableField<ForeignDataWrapperOptionsRecord, String> FOREIGN_DATA_WRAPPER_CATALOG = createField(DSL.name("foreign_data_wrapper_catalog"), nu.studer.sample.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema.foreign_data_wrapper_options.foreign_data_wrapper_name</code>.
     */
    public final TableField<ForeignDataWrapperOptionsRecord, String> FOREIGN_DATA_WRAPPER_NAME = createField(DSL.name("foreign_data_wrapper_name"), nu.studer.sample.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema.foreign_data_wrapper_options.option_name</code>.
     */
    public final TableField<ForeignDataWrapperOptionsRecord, String> OPTION_NAME = createField(DSL.name("option_name"), nu.studer.sample.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema.foreign_data_wrapper_options.option_value</code>.
     */
    public final TableField<ForeignDataWrapperOptionsRecord, String> OPTION_VALUE = createField(DSL.name("option_value"), nu.studer.sample.information_schema.Domains.CHARACTER_DATA.getDataType(), this, "");

    private ForeignDataWrapperOptions(Name alias, Table<ForeignDataWrapperOptionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ForeignDataWrapperOptions(Name alias, Table<ForeignDataWrapperOptionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"foreign_data_wrapper_options\" as  SELECT w.foreign_data_wrapper_catalog,\n    w.foreign_data_wrapper_name,\n    ((pg_options_to_table(w.fdwoptions)).option_name)::information_schema.sql_identifier AS option_name,\n    ((pg_options_to_table(w.fdwoptions)).option_value)::information_schema.character_data AS option_value\n   FROM information_schema._pg_foreign_data_wrappers w;"));
    }

    /**
     * Create an aliased
     * <code>information_schema.foreign_data_wrapper_options</code> table
     * reference
     */
    public ForeignDataWrapperOptions(String alias) {
        this(DSL.name(alias), FOREIGN_DATA_WRAPPER_OPTIONS);
    }

    /**
     * Create an aliased
     * <code>information_schema.foreign_data_wrapper_options</code> table
     * reference
     */
    public ForeignDataWrapperOptions(Name alias) {
        this(alias, FOREIGN_DATA_WRAPPER_OPTIONS);
    }

    /**
     * Create a <code>information_schema.foreign_data_wrapper_options</code>
     * table reference
     */
    public ForeignDataWrapperOptions() {
        this(DSL.name("foreign_data_wrapper_options"), null);
    }

    public <O extends Record> ForeignDataWrapperOptions(Table<O> child, ForeignKey<O, ForeignDataWrapperOptionsRecord> key) {
        super(child, key, FOREIGN_DATA_WRAPPER_OPTIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public ForeignDataWrapperOptions as(String alias) {
        return new ForeignDataWrapperOptions(DSL.name(alias), this);
    }

    @Override
    public ForeignDataWrapperOptions as(Name alias) {
        return new ForeignDataWrapperOptions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ForeignDataWrapperOptions rename(String name) {
        return new ForeignDataWrapperOptions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ForeignDataWrapperOptions rename(Name name) {
        return new ForeignDataWrapperOptions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
