/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.information_schema.tables;


import nu.studer.sample.information_schema.InformationSchema;
import nu.studer.sample.information_schema.tables.records.ForeignTablesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ForeignTables extends TableImpl<ForeignTablesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>information_schema.foreign_tables</code>
     */
    public static final ForeignTables FOREIGN_TABLES = new ForeignTables();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ForeignTablesRecord> getRecordType() {
        return ForeignTablesRecord.class;
    }

    /**
     * The column
     * <code>information_schema.foreign_tables.foreign_table_catalog</code>.
     */
    public final TableField<ForeignTablesRecord, String> FOREIGN_TABLE_CATALOG = createField(DSL.name("foreign_table_catalog"), nu.studer.sample.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema.foreign_tables.foreign_table_schema</code>.
     */
    public final TableField<ForeignTablesRecord, String> FOREIGN_TABLE_SCHEMA = createField(DSL.name("foreign_table_schema"), nu.studer.sample.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema.foreign_tables.foreign_table_name</code>.
     */
    public final TableField<ForeignTablesRecord, String> FOREIGN_TABLE_NAME = createField(DSL.name("foreign_table_name"), nu.studer.sample.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema.foreign_tables.foreign_server_catalog</code>.
     */
    public final TableField<ForeignTablesRecord, String> FOREIGN_SERVER_CATALOG = createField(DSL.name("foreign_server_catalog"), nu.studer.sample.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema.foreign_tables.foreign_server_name</code>.
     */
    public final TableField<ForeignTablesRecord, String> FOREIGN_SERVER_NAME = createField(DSL.name("foreign_server_name"), nu.studer.sample.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    private ForeignTables(Name alias, Table<ForeignTablesRecord> aliased) {
        this(alias, aliased, null);
    }

    private ForeignTables(Name alias, Table<ForeignTablesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"foreign_tables\" as  SELECT _pg_foreign_tables.foreign_table_catalog,\n    _pg_foreign_tables.foreign_table_schema,\n    _pg_foreign_tables.foreign_table_name,\n    _pg_foreign_tables.foreign_server_catalog,\n    _pg_foreign_tables.foreign_server_name\n   FROM information_schema._pg_foreign_tables;"));
    }

    /**
     * Create an aliased <code>information_schema.foreign_tables</code> table
     * reference
     */
    public ForeignTables(String alias) {
        this(DSL.name(alias), FOREIGN_TABLES);
    }

    /**
     * Create an aliased <code>information_schema.foreign_tables</code> table
     * reference
     */
    public ForeignTables(Name alias) {
        this(alias, FOREIGN_TABLES);
    }

    /**
     * Create a <code>information_schema.foreign_tables</code> table reference
     */
    public ForeignTables() {
        this(DSL.name("foreign_tables"), null);
    }

    public <O extends Record> ForeignTables(Table<O> child, ForeignKey<O, ForeignTablesRecord> key) {
        super(child, key, FOREIGN_TABLES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public ForeignTables as(String alias) {
        return new ForeignTables(DSL.name(alias), this);
    }

    @Override
    public ForeignTables as(Name alias) {
        return new ForeignTables(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ForeignTables rename(String name) {
        return new ForeignTables(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ForeignTables rename(Name name) {
        return new ForeignTables(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
