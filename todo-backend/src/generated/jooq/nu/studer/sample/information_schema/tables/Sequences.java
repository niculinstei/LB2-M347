/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.information_schema.tables;


import nu.studer.sample.information_schema.InformationSchema;
import nu.studer.sample.information_schema.tables.records.SequencesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sequences extends TableImpl<SequencesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>information_schema.sequences</code>
     */
    public static final Sequences SEQUENCES = new Sequences();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SequencesRecord> getRecordType() {
        return SequencesRecord.class;
    }

    /**
     * The column <code>information_schema.sequences.sequence_catalog</code>.
     */
    public final TableField<SequencesRecord, String> SEQUENCE_CATALOG = createField(DSL.name("sequence_catalog"), nu.studer.sample.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column <code>information_schema.sequences.sequence_schema</code>.
     */
    public final TableField<SequencesRecord, String> SEQUENCE_SCHEMA = createField(DSL.name("sequence_schema"), nu.studer.sample.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column <code>information_schema.sequences.sequence_name</code>.
     */
    public final TableField<SequencesRecord, String> SEQUENCE_NAME = createField(DSL.name("sequence_name"), nu.studer.sample.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column <code>information_schema.sequences.data_type</code>.
     */
    public final TableField<SequencesRecord, String> DATA_TYPE = createField(DSL.name("data_type"), nu.studer.sample.information_schema.Domains.CHARACTER_DATA.getDataType(), this, "");

    /**
     * The column <code>information_schema.sequences.numeric_precision</code>.
     */
    public final TableField<SequencesRecord, Integer> NUMERIC_PRECISION = createField(DSL.name("numeric_precision"), nu.studer.sample.information_schema.Domains.CARDINAL_NUMBER.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema.sequences.numeric_precision_radix</code>.
     */
    public final TableField<SequencesRecord, Integer> NUMERIC_PRECISION_RADIX = createField(DSL.name("numeric_precision_radix"), nu.studer.sample.information_schema.Domains.CARDINAL_NUMBER.getDataType(), this, "");

    /**
     * The column <code>information_schema.sequences.numeric_scale</code>.
     */
    public final TableField<SequencesRecord, Integer> NUMERIC_SCALE = createField(DSL.name("numeric_scale"), nu.studer.sample.information_schema.Domains.CARDINAL_NUMBER.getDataType(), this, "");

    /**
     * The column <code>information_schema.sequences.start_value</code>.
     */
    public final TableField<SequencesRecord, String> START_VALUE = createField(DSL.name("start_value"), nu.studer.sample.information_schema.Domains.CHARACTER_DATA.getDataType(), this, "");

    /**
     * The column <code>information_schema.sequences.minimum_value</code>.
     */
    public final TableField<SequencesRecord, String> MINIMUM_VALUE = createField(DSL.name("minimum_value"), nu.studer.sample.information_schema.Domains.CHARACTER_DATA.getDataType(), this, "");

    /**
     * The column <code>information_schema.sequences.maximum_value</code>.
     */
    public final TableField<SequencesRecord, String> MAXIMUM_VALUE = createField(DSL.name("maximum_value"), nu.studer.sample.information_schema.Domains.CHARACTER_DATA.getDataType(), this, "");

    /**
     * The column <code>information_schema.sequences.increment</code>.
     */
    public final TableField<SequencesRecord, String> INCREMENT = createField(DSL.name("increment"), nu.studer.sample.information_schema.Domains.CHARACTER_DATA.getDataType(), this, "");

    /**
     * The column <code>information_schema.sequences.cycle_option</code>.
     */
    public final TableField<SequencesRecord, String> CYCLE_OPTION = createField(DSL.name("cycle_option"), nu.studer.sample.information_schema.Domains.YES_OR_NO.getDataType(), this, "");

    private Sequences(Name alias, Table<SequencesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Sequences(Name alias, Table<SequencesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"sequences\" as  SELECT (current_database())::information_schema.sql_identifier AS sequence_catalog,\n    (nc.nspname)::information_schema.sql_identifier AS sequence_schema,\n    (c.relname)::information_schema.sql_identifier AS sequence_name,\n    (format_type(s.seqtypid, NULL::integer))::information_schema.character_data AS data_type,\n    (information_schema._pg_numeric_precision(s.seqtypid, '-1'::integer))::information_schema.cardinal_number AS numeric_precision,\n    (2)::information_schema.cardinal_number AS numeric_precision_radix,\n    (0)::information_schema.cardinal_number AS numeric_scale,\n    (s.seqstart)::information_schema.character_data AS start_value,\n    (s.seqmin)::information_schema.character_data AS minimum_value,\n    (s.seqmax)::information_schema.character_data AS maximum_value,\n    (s.seqincrement)::information_schema.character_data AS increment,\n    (\n        CASE\n            WHEN s.seqcycle THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS cycle_option\n   FROM pg_namespace nc,\n    pg_class c,\n    pg_sequence s\n  WHERE ((c.relnamespace = nc.oid) AND (c.relkind = 'S'::\"char\") AND (NOT (EXISTS ( SELECT 1\n           FROM pg_depend\n          WHERE ((pg_depend.classid = ('pg_class'::regclass)::oid) AND (pg_depend.objid = c.oid) AND (pg_depend.deptype = 'i'::\"char\"))))) AND (NOT pg_is_other_temp_schema(nc.oid)) AND (c.oid = s.seqrelid) AND (pg_has_role(c.relowner, 'USAGE'::text) OR has_sequence_privilege(c.oid, 'SELECT, UPDATE, USAGE'::text)));"));
    }

    /**
     * Create an aliased <code>information_schema.sequences</code> table
     * reference
     */
    public Sequences(String alias) {
        this(DSL.name(alias), SEQUENCES);
    }

    /**
     * Create an aliased <code>information_schema.sequences</code> table
     * reference
     */
    public Sequences(Name alias) {
        this(alias, SEQUENCES);
    }

    /**
     * Create a <code>information_schema.sequences</code> table reference
     */
    public Sequences() {
        this(DSL.name("sequences"), null);
    }

    public <O extends Record> Sequences(Table<O> child, ForeignKey<O, SequencesRecord> key) {
        super(child, key, SEQUENCES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public Sequences as(String alias) {
        return new Sequences(DSL.name(alias), this);
    }

    @Override
    public Sequences as(Name alias) {
        return new Sequences(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sequences rename(String name) {
        return new Sequences(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sequences rename(Name name) {
        return new Sequences(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<String, String, String, String, Integer, Integer, Integer, String, String, String, String, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
