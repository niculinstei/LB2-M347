/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.information_schema.tables;


import nu.studer.sample.information_schema.InformationSchema;
import nu.studer.sample.information_schema.tables.records.UsagePrivilegesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsagePrivileges extends TableImpl<UsagePrivilegesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>information_schema.usage_privileges</code>
     */
    public static final UsagePrivileges USAGE_PRIVILEGES = new UsagePrivileges();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsagePrivilegesRecord> getRecordType() {
        return UsagePrivilegesRecord.class;
    }

    /**
     * The column <code>information_schema.usage_privileges.grantor</code>.
     */
    public final TableField<UsagePrivilegesRecord, String> GRANTOR = createField(DSL.name("grantor"), nu.studer.sample.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column <code>information_schema.usage_privileges.grantee</code>.
     */
    public final TableField<UsagePrivilegesRecord, String> GRANTEE = createField(DSL.name("grantee"), nu.studer.sample.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema.usage_privileges.object_catalog</code>.
     */
    public final TableField<UsagePrivilegesRecord, String> OBJECT_CATALOG = createField(DSL.name("object_catalog"), nu.studer.sample.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema.usage_privileges.object_schema</code>.
     */
    public final TableField<UsagePrivilegesRecord, String> OBJECT_SCHEMA = createField(DSL.name("object_schema"), nu.studer.sample.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column <code>information_schema.usage_privileges.object_name</code>.
     */
    public final TableField<UsagePrivilegesRecord, String> OBJECT_NAME = createField(DSL.name("object_name"), nu.studer.sample.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column <code>information_schema.usage_privileges.object_type</code>.
     */
    public final TableField<UsagePrivilegesRecord, String> OBJECT_TYPE = createField(DSL.name("object_type"), nu.studer.sample.information_schema.Domains.CHARACTER_DATA.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema.usage_privileges.privilege_type</code>.
     */
    public final TableField<UsagePrivilegesRecord, String> PRIVILEGE_TYPE = createField(DSL.name("privilege_type"), nu.studer.sample.information_schema.Domains.CHARACTER_DATA.getDataType(), this, "");

    /**
     * The column <code>information_schema.usage_privileges.is_grantable</code>.
     */
    public final TableField<UsagePrivilegesRecord, String> IS_GRANTABLE = createField(DSL.name("is_grantable"), nu.studer.sample.information_schema.Domains.YES_OR_NO.getDataType(), this, "");

    private UsagePrivileges(Name alias, Table<UsagePrivilegesRecord> aliased) {
        this(alias, aliased, null);
    }

    private UsagePrivileges(Name alias, Table<UsagePrivilegesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"usage_privileges\" as  SELECT (u.rolname)::information_schema.sql_identifier AS grantor,\n    ('PUBLIC'::name)::information_schema.sql_identifier AS grantee,\n    (current_database())::information_schema.sql_identifier AS object_catalog,\n    (n.nspname)::information_schema.sql_identifier AS object_schema,\n    (c.collname)::information_schema.sql_identifier AS object_name,\n    ('COLLATION'::character varying)::information_schema.character_data AS object_type,\n    ('USAGE'::character varying)::information_schema.character_data AS privilege_type,\n    ('NO'::character varying)::information_schema.yes_or_no AS is_grantable\n   FROM pg_authid u,\n    pg_namespace n,\n    pg_collation c\n  WHERE ((u.oid = c.collowner) AND (c.collnamespace = n.oid) AND (c.collencoding = ANY (ARRAY['-1'::integer, ( SELECT pg_database.encoding\n           FROM pg_database\n          WHERE (pg_database.datname = current_database()))])))\nUNION ALL\n SELECT (u_grantor.rolname)::information_schema.sql_identifier AS grantor,\n    (grantee.rolname)::information_schema.sql_identifier AS grantee,\n    (current_database())::information_schema.sql_identifier AS object_catalog,\n    (n.nspname)::information_schema.sql_identifier AS object_schema,\n    (t.typname)::information_schema.sql_identifier AS object_name,\n    ('DOMAIN'::character varying)::information_schema.character_data AS object_type,\n    ('USAGE'::character varying)::information_schema.character_data AS privilege_type,\n    (\n        CASE\n            WHEN (pg_has_role(grantee.oid, t.typowner, 'USAGE'::text) OR t.grantable) THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS is_grantable\n   FROM ( SELECT pg_type.oid,\n            pg_type.typname,\n            pg_type.typnamespace,\n            pg_type.typtype,\n            pg_type.typowner,\n            (aclexplode(COALESCE(pg_type.typacl, acldefault('T'::\"char\", pg_type.typowner)))).grantor AS grantor,\n            (aclexplode(COALESCE(pg_type.typacl, acldefault('T'::\"char\", pg_type.typowner)))).grantee AS grantee,\n            (aclexplode(COALESCE(pg_type.typacl, acldefault('T'::\"char\", pg_type.typowner)))).privilege_type AS privilege_type,\n            (aclexplode(COALESCE(pg_type.typacl, acldefault('T'::\"char\", pg_type.typowner)))).is_grantable AS is_grantable\n           FROM pg_type) t(oid, typname, typnamespace, typtype, typowner, grantor, grantee, prtype, grantable),\n    pg_namespace n,\n    pg_authid u_grantor,\n    ( SELECT pg_authid.oid,\n            pg_authid.rolname\n           FROM pg_authid\n        UNION ALL\n         SELECT (0)::oid AS oid,\n            'PUBLIC'::name) grantee(oid, rolname)\n  WHERE ((t.typnamespace = n.oid) AND (t.typtype = 'd'::\"char\") AND (t.grantee = grantee.oid) AND (t.grantor = u_grantor.oid) AND (t.prtype = 'USAGE'::text) AND (pg_has_role(u_grantor.oid, 'USAGE'::text) OR pg_has_role(grantee.oid, 'USAGE'::text) OR (grantee.rolname = 'PUBLIC'::name)))\nUNION ALL\n SELECT (u_grantor.rolname)::information_schema.sql_identifier AS grantor,\n    (grantee.rolname)::information_schema.sql_identifier AS grantee,\n    (current_database())::information_schema.sql_identifier AS object_catalog,\n    (''::name)::information_schema.sql_identifier AS object_schema,\n    (fdw.fdwname)::information_schema.sql_identifier AS object_name,\n    ('FOREIGN DATA WRAPPER'::character varying)::information_schema.character_data AS object_type,\n    ('USAGE'::character varying)::information_schema.character_data AS privilege_type,\n    (\n        CASE\n            WHEN (pg_has_role(grantee.oid, fdw.fdwowner, 'USAGE'::text) OR fdw.grantable) THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS is_grantable\n   FROM ( SELECT pg_foreign_data_wrapper.fdwname,\n            pg_foreign_data_wrapper.fdwowner,\n            (aclexplode(COALESCE(pg_foreign_data_wrapper.fdwacl, acldefault('F'::\"char\", pg_foreign_data_wrapper.fdwowner)))).grantor AS grantor,\n            (aclexplode(COALESCE(pg_foreign_data_wrapper.fdwacl, acldefault('F'::\"char\", pg_foreign_data_wrapper.fdwowner)))).grantee AS grantee,\n            (aclexplode(COALESCE(pg_foreign_data_wrapper.fdwacl, acldefault('F'::\"char\", pg_foreign_data_wrapper.fdwowner)))).privilege_type AS privilege_type,\n            (aclexplode(COALESCE(pg_foreign_data_wrapper.fdwacl, acldefault('F'::\"char\", pg_foreign_data_wrapper.fdwowner)))).is_grantable AS is_grantable\n           FROM pg_foreign_data_wrapper) fdw(fdwname, fdwowner, grantor, grantee, prtype, grantable),\n    pg_authid u_grantor,\n    ( SELECT pg_authid.oid,\n            pg_authid.rolname\n           FROM pg_authid\n        UNION ALL\n         SELECT (0)::oid AS oid,\n            'PUBLIC'::name) grantee(oid, rolname)\n  WHERE ((u_grantor.oid = fdw.grantor) AND (grantee.oid = fdw.grantee) AND (fdw.prtype = 'USAGE'::text) AND (pg_has_role(u_grantor.oid, 'USAGE'::text) OR pg_has_role(grantee.oid, 'USAGE'::text) OR (grantee.rolname = 'PUBLIC'::name)))\nUNION ALL\n SELECT (u_grantor.rolname)::information_schema.sql_identifier AS grantor,\n    (grantee.rolname)::information_schema.sql_identifier AS grantee,\n    (current_database())::information_schema.sql_identifier AS object_catalog,\n    (''::name)::information_schema.sql_identifier AS object_schema,\n    (srv.srvname)::information_schema.sql_identifier AS object_name,\n    ('FOREIGN SERVER'::character varying)::information_schema.character_data AS object_type,\n    ('USAGE'::character varying)::information_schema.character_data AS privilege_type,\n    (\n        CASE\n            WHEN (pg_has_role(grantee.oid, srv.srvowner, 'USAGE'::text) OR srv.grantable) THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS is_grantable\n   FROM ( SELECT pg_foreign_server.srvname,\n            pg_foreign_server.srvowner,\n            (aclexplode(COALESCE(pg_foreign_server.srvacl, acldefault('S'::\"char\", pg_foreign_server.srvowner)))).grantor AS grantor,\n            (aclexplode(COALESCE(pg_foreign_server.srvacl, acldefault('S'::\"char\", pg_foreign_server.srvowner)))).grantee AS grantee,\n            (aclexplode(COALESCE(pg_foreign_server.srvacl, acldefault('S'::\"char\", pg_foreign_server.srvowner)))).privilege_type AS privilege_type,\n            (aclexplode(COALESCE(pg_foreign_server.srvacl, acldefault('S'::\"char\", pg_foreign_server.srvowner)))).is_grantable AS is_grantable\n           FROM pg_foreign_server) srv(srvname, srvowner, grantor, grantee, prtype, grantable),\n    pg_authid u_grantor,\n    ( SELECT pg_authid.oid,\n            pg_authid.rolname\n           FROM pg_authid\n        UNION ALL\n         SELECT (0)::oid AS oid,\n            'PUBLIC'::name) grantee(oid, rolname)\n  WHERE ((u_grantor.oid = srv.grantor) AND (grantee.oid = srv.grantee) AND (srv.prtype = 'USAGE'::text) AND (pg_has_role(u_grantor.oid, 'USAGE'::text) OR pg_has_role(grantee.oid, 'USAGE'::text) OR (grantee.rolname = 'PUBLIC'::name)))\nUNION ALL\n SELECT (u_grantor.rolname)::information_schema.sql_identifier AS grantor,\n    (grantee.rolname)::information_schema.sql_identifier AS grantee,\n    (current_database())::information_schema.sql_identifier AS object_catalog,\n    (n.nspname)::information_schema.sql_identifier AS object_schema,\n    (c.relname)::information_schema.sql_identifier AS object_name,\n    ('SEQUENCE'::character varying)::information_schema.character_data AS object_type,\n    ('USAGE'::character varying)::information_schema.character_data AS privilege_type,\n    (\n        CASE\n            WHEN (pg_has_role(grantee.oid, c.relowner, 'USAGE'::text) OR c.grantable) THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS is_grantable\n   FROM ( SELECT pg_class.oid,\n            pg_class.relname,\n            pg_class.relnamespace,\n            pg_class.relkind,\n            pg_class.relowner,\n            (aclexplode(COALESCE(pg_class.relacl, acldefault('r'::\"char\", pg_class.relowner)))).grantor AS grantor,\n            (aclexplode(COALESCE(pg_class.relacl, acldefault('r'::\"char\", pg_class.relowner)))).grantee AS grantee,\n            (aclexplode(COALESCE(pg_class.relacl, acldefault('r'::\"char\", pg_class.relowner)))).privilege_type AS privilege_type,\n            (aclexplode(COALESCE(pg_class.relacl, acldefault('r'::\"char\", pg_class.relowner)))).is_grantable AS is_grantable\n           FROM pg_class) c(oid, relname, relnamespace, relkind, relowner, grantor, grantee, prtype, grantable),\n    pg_namespace n,\n    pg_authid u_grantor,\n    ( SELECT pg_authid.oid,\n            pg_authid.rolname\n           FROM pg_authid\n        UNION ALL\n         SELECT (0)::oid AS oid,\n            'PUBLIC'::name) grantee(oid, rolname)\n  WHERE ((c.relnamespace = n.oid) AND (c.relkind = 'S'::\"char\") AND (c.grantee = grantee.oid) AND (c.grantor = u_grantor.oid) AND (c.prtype = 'USAGE'::text) AND (pg_has_role(u_grantor.oid, 'USAGE'::text) OR pg_has_role(grantee.oid, 'USAGE'::text) OR (grantee.rolname = 'PUBLIC'::name)));"));
    }

    /**
     * Create an aliased <code>information_schema.usage_privileges</code> table
     * reference
     */
    public UsagePrivileges(String alias) {
        this(DSL.name(alias), USAGE_PRIVILEGES);
    }

    /**
     * Create an aliased <code>information_schema.usage_privileges</code> table
     * reference
     */
    public UsagePrivileges(Name alias) {
        this(alias, USAGE_PRIVILEGES);
    }

    /**
     * Create a <code>information_schema.usage_privileges</code> table reference
     */
    public UsagePrivileges() {
        this(DSL.name("usage_privileges"), null);
    }

    public <O extends Record> UsagePrivileges(Table<O> child, ForeignKey<O, UsagePrivilegesRecord> key) {
        super(child, key, USAGE_PRIVILEGES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public UsagePrivileges as(String alias) {
        return new UsagePrivileges(DSL.name(alias), this);
    }

    @Override
    public UsagePrivileges as(Name alias) {
        return new UsagePrivileges(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UsagePrivileges rename(String name) {
        return new UsagePrivileges(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UsagePrivileges rename(Name name) {
        return new UsagePrivileges(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
