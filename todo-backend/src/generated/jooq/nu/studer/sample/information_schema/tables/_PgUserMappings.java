/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.information_schema.tables;


import nu.studer.sample.information_schema.InformationSchema;
import nu.studer.sample.information_schema.tables.records._PgUserMappingsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class _PgUserMappings extends TableImpl<_PgUserMappingsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>information_schema._pg_user_mappings</code>
     */
    public static final _PgUserMappings _PG_USER_MAPPINGS = new _PgUserMappings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<_PgUserMappingsRecord> getRecordType() {
        return _PgUserMappingsRecord.class;
    }

    /**
     * The column <code>information_schema._pg_user_mappings.oid</code>.
     */
    public final TableField<_PgUserMappingsRecord, Long> OID = createField(DSL.name("oid"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>information_schema._pg_user_mappings.umoptions</code>.
     */
    public final TableField<_PgUserMappingsRecord, String[]> UMOPTIONS = createField(DSL.name("umoptions"), SQLDataType.CLOB.getArrayDataType(), this, "");

    /**
     * The column <code>information_schema._pg_user_mappings.umuser</code>.
     */
    public final TableField<_PgUserMappingsRecord, Long> UMUSER = createField(DSL.name("umuser"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>information_schema._pg_user_mappings.authorization_identifier</code>.
     */
    public final TableField<_PgUserMappingsRecord, String> AUTHORIZATION_IDENTIFIER = createField(DSL.name("authorization_identifier"), nu.studer.sample.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema._pg_user_mappings.foreign_server_catalog</code>.
     */
    public final TableField<_PgUserMappingsRecord, String> FOREIGN_SERVER_CATALOG = createField(DSL.name("foreign_server_catalog"), nu.studer.sample.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema._pg_user_mappings.foreign_server_name</code>.
     */
    public final TableField<_PgUserMappingsRecord, String> FOREIGN_SERVER_NAME = createField(DSL.name("foreign_server_name"), nu.studer.sample.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column <code>information_schema._pg_user_mappings.srvowner</code>.
     */
    public final TableField<_PgUserMappingsRecord, String> SRVOWNER = createField(DSL.name("srvowner"), nu.studer.sample.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    private _PgUserMappings(Name alias, Table<_PgUserMappingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private _PgUserMappings(Name alias, Table<_PgUserMappingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"_pg_user_mappings\" as  SELECT um.oid,\n    um.umoptions,\n    um.umuser,\n    (COALESCE(u.rolname, 'PUBLIC'::name))::information_schema.sql_identifier AS authorization_identifier,\n    s.foreign_server_catalog,\n    s.foreign_server_name,\n    s.authorization_identifier AS srvowner\n   FROM (pg_user_mapping um\n     LEFT JOIN pg_authid u ON ((u.oid = um.umuser))),\n    information_schema._pg_foreign_servers s\n  WHERE (s.oid = um.umserver);"));
    }

    /**
     * Create an aliased <code>information_schema._pg_user_mappings</code> table
     * reference
     */
    public _PgUserMappings(String alias) {
        this(DSL.name(alias), _PG_USER_MAPPINGS);
    }

    /**
     * Create an aliased <code>information_schema._pg_user_mappings</code> table
     * reference
     */
    public _PgUserMappings(Name alias) {
        this(alias, _PG_USER_MAPPINGS);
    }

    /**
     * Create a <code>information_schema._pg_user_mappings</code> table
     * reference
     */
    public _PgUserMappings() {
        this(DSL.name("_pg_user_mappings"), null);
    }

    public <O extends Record> _PgUserMappings(Table<O> child, ForeignKey<O, _PgUserMappingsRecord> key) {
        super(child, key, _PG_USER_MAPPINGS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public _PgUserMappings as(String alias) {
        return new _PgUserMappings(DSL.name(alias), this);
    }

    @Override
    public _PgUserMappings as(Name alias) {
        return new _PgUserMappings(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public _PgUserMappings rename(String name) {
        return new _PgUserMappings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public _PgUserMappings rename(Name name) {
        return new _PgUserMappings(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String[], Long, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
