/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.information_schema.tables.records;


import nu.studer.sample.information_schema.tables.ColumnColumnUsage;

import org.jooq.Field;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ColumnColumnUsageRecord extends TableRecordImpl<ColumnColumnUsageRecord> implements Record5<String, String, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>information_schema.column_column_usage.table_catalog</code>.
     */
    public void setTableCatalog(String value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>information_schema.column_column_usage.table_catalog</code>.
     */
    public String getTableCatalog() {
        return (String) get(0);
    }

    /**
     * Setter for
     * <code>information_schema.column_column_usage.table_schema</code>.
     */
    public void setTableSchema(String value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>information_schema.column_column_usage.table_schema</code>.
     */
    public String getTableSchema() {
        return (String) get(1);
    }

    /**
     * Setter for
     * <code>information_schema.column_column_usage.table_name</code>.
     */
    public void setTableName(String value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>information_schema.column_column_usage.table_name</code>.
     */
    public String getTableName() {
        return (String) get(2);
    }

    /**
     * Setter for
     * <code>information_schema.column_column_usage.column_name</code>.
     */
    public void setColumnName(String value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>information_schema.column_column_usage.column_name</code>.
     */
    public String getColumnName() {
        return (String) get(3);
    }

    /**
     * Setter for
     * <code>information_schema.column_column_usage.dependent_column</code>.
     */
    public void setDependentColumn(String value) {
        set(4, value);
    }

    /**
     * Getter for
     * <code>information_schema.column_column_usage.dependent_column</code>.
     */
    public String getDependentColumn() {
        return (String) get(4);
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<String, String, String, String, String> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return ColumnColumnUsage.COLUMN_COLUMN_USAGE.TABLE_CATALOG;
    }

    @Override
    public Field<String> field2() {
        return ColumnColumnUsage.COLUMN_COLUMN_USAGE.TABLE_SCHEMA;
    }

    @Override
    public Field<String> field3() {
        return ColumnColumnUsage.COLUMN_COLUMN_USAGE.TABLE_NAME;
    }

    @Override
    public Field<String> field4() {
        return ColumnColumnUsage.COLUMN_COLUMN_USAGE.COLUMN_NAME;
    }

    @Override
    public Field<String> field5() {
        return ColumnColumnUsage.COLUMN_COLUMN_USAGE.DEPENDENT_COLUMN;
    }

    @Override
    public String component1() {
        return getTableCatalog();
    }

    @Override
    public String component2() {
        return getTableSchema();
    }

    @Override
    public String component3() {
        return getTableName();
    }

    @Override
    public String component4() {
        return getColumnName();
    }

    @Override
    public String component5() {
        return getDependentColumn();
    }

    @Override
    public String value1() {
        return getTableCatalog();
    }

    @Override
    public String value2() {
        return getTableSchema();
    }

    @Override
    public String value3() {
        return getTableName();
    }

    @Override
    public String value4() {
        return getColumnName();
    }

    @Override
    public String value5() {
        return getDependentColumn();
    }

    @Override
    public ColumnColumnUsageRecord value1(String value) {
        setTableCatalog(value);
        return this;
    }

    @Override
    public ColumnColumnUsageRecord value2(String value) {
        setTableSchema(value);
        return this;
    }

    @Override
    public ColumnColumnUsageRecord value3(String value) {
        setTableName(value);
        return this;
    }

    @Override
    public ColumnColumnUsageRecord value4(String value) {
        setColumnName(value);
        return this;
    }

    @Override
    public ColumnColumnUsageRecord value5(String value) {
        setDependentColumn(value);
        return this;
    }

    @Override
    public ColumnColumnUsageRecord values(String value1, String value2, String value3, String value4, String value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ColumnColumnUsageRecord
     */
    public ColumnColumnUsageRecord() {
        super(ColumnColumnUsage.COLUMN_COLUMN_USAGE);
    }

    /**
     * Create a detached, initialised ColumnColumnUsageRecord
     */
    public ColumnColumnUsageRecord(String tableCatalog, String tableSchema, String tableName, String columnName, String dependentColumn) {
        super(ColumnColumnUsage.COLUMN_COLUMN_USAGE);

        setTableCatalog(tableCatalog);
        setTableSchema(tableSchema);
        setTableName(tableName);
        setColumnName(columnName);
        setDependentColumn(dependentColumn);
    }
}
