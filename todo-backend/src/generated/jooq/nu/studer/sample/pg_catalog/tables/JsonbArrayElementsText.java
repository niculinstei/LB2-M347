/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.pg_catalog.tables;


import nu.studer.sample.pg_catalog.PgCatalog;
import nu.studer.sample.pg_catalog.tables.records.JsonbArrayElementsTextRecord;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JsonbArrayElementsText extends TableImpl<JsonbArrayElementsTextRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>pg_catalog.jsonb_array_elements_text</code>
     */
    public static final JsonbArrayElementsText JSONB_ARRAY_ELEMENTS_TEXT = new JsonbArrayElementsText();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JsonbArrayElementsTextRecord> getRecordType() {
        return JsonbArrayElementsTextRecord.class;
    }

    /**
     * The column <code>pg_catalog.jsonb_array_elements_text.value</code>.
     */
    public final TableField<JsonbArrayElementsTextRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB, this, "");

    private JsonbArrayElementsText(Name alias, Table<JsonbArrayElementsTextRecord> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, SQLDataType.VARCHAR)
        });
    }

    private JsonbArrayElementsText(Name alias, Table<JsonbArrayElementsTextRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased <code>pg_catalog.jsonb_array_elements_text</code> table
     * reference
     */
    public JsonbArrayElementsText(String alias) {
        this(DSL.name(alias), JSONB_ARRAY_ELEMENTS_TEXT);
    }

    /**
     * Create an aliased <code>pg_catalog.jsonb_array_elements_text</code> table
     * reference
     */
    public JsonbArrayElementsText(Name alias) {
        this(alias, JSONB_ARRAY_ELEMENTS_TEXT);
    }

    /**
     * Create a <code>pg_catalog.jsonb_array_elements_text</code> table
     * reference
     */
    public JsonbArrayElementsText() {
        this(DSL.name("jsonb_array_elements_text"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public JsonbArrayElementsText as(String alias) {
        return new JsonbArrayElementsText(DSL.name(alias), this, parameters);
    }

    @Override
    public JsonbArrayElementsText as(Name alias) {
        return new JsonbArrayElementsText(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public JsonbArrayElementsText rename(String name) {
        return new JsonbArrayElementsText(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public JsonbArrayElementsText rename(Name name) {
        return new JsonbArrayElementsText(name, null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<String> fieldsRow() {
        return (Row1) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public JsonbArrayElementsText call(
          String fromJson
    ) {
        JsonbArrayElementsText result = new JsonbArrayElementsText(DSL.name("jsonb_array_elements_text"), null, new Field[] {
            DSL.val(fromJson, SQLDataType.VARCHAR)
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public JsonbArrayElementsText call(
          Field<String> fromJson
    ) {
        JsonbArrayElementsText result = new JsonbArrayElementsText(DSL.name("jsonb_array_elements_text"), null, new Field[] {
            fromJson
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
