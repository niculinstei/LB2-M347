/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.pg_catalog.tables;


import java.time.OffsetDateTime;

import nu.studer.sample.pg_catalog.PgCatalog;
import nu.studer.sample.pg_catalog.tables.records.PgLsTmpdirRecord;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgLsTmpdir extends TableImpl<PgLsTmpdirRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_ls_tmpdir</code>
     */
    public static final PgLsTmpdir PG_LS_TMPDIR = new PgLsTmpdir();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgLsTmpdirRecord> getRecordType() {
        return PgLsTmpdirRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_ls_tmpdir.name</code>.
     */
    public final TableField<PgLsTmpdirRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_ls_tmpdir.size</code>.
     */
    public final TableField<PgLsTmpdirRecord, Long> SIZE = createField(DSL.name("size"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_ls_tmpdir.modification</code>.
     */
    public final TableField<PgLsTmpdirRecord, OffsetDateTime> MODIFICATION = createField(DSL.name("modification"), SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    private PgLsTmpdir(Name alias, Table<PgLsTmpdirRecord> aliased) {
        this(alias, aliased, new Field[] {
        });
    }

    private PgLsTmpdir(Name alias, Table<PgLsTmpdirRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased <code>pg_catalog.pg_ls_tmpdir</code> table reference
     */
    public PgLsTmpdir(String alias) {
        this(DSL.name(alias), PG_LS_TMPDIR);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_ls_tmpdir</code> table reference
     */
    public PgLsTmpdir(Name alias) {
        this(alias, PG_LS_TMPDIR);
    }

    /**
     * Create a <code>pg_catalog.pg_ls_tmpdir</code> table reference
     */
    public PgLsTmpdir() {
        this(DSL.name("pg_ls_tmpdir"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public PgLsTmpdir as(String alias) {
        return new PgLsTmpdir(DSL.name(alias), this, parameters);
    }

    @Override
    public PgLsTmpdir as(Name alias) {
        return new PgLsTmpdir(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PgLsTmpdir rename(String name) {
        return new PgLsTmpdir(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PgLsTmpdir rename(Name name) {
        return new PgLsTmpdir(name, null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, Long, OffsetDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public PgLsTmpdir call() {
        PgLsTmpdir result = new PgLsTmpdir(DSL.name("pg_ls_tmpdir"), null, new Field[] {});

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
