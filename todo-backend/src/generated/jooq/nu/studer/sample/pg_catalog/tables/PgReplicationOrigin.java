/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.pg_catalog.tables;


import java.util.Arrays;
import java.util.List;

import nu.studer.sample.pg_catalog.Keys;
import nu.studer.sample.pg_catalog.PgCatalog;
import nu.studer.sample.pg_catalog.tables.records.PgReplicationOriginRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgReplicationOrigin extends TableImpl<PgReplicationOriginRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_replication_origin</code>
     */
    public static final PgReplicationOrigin PG_REPLICATION_ORIGIN = new PgReplicationOrigin();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgReplicationOriginRecord> getRecordType() {
        return PgReplicationOriginRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_replication_origin.roident</code>.
     */
    public final TableField<PgReplicationOriginRecord, Long> ROIDENT = createField(DSL.name("roident"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_replication_origin.roname</code>.
     */
    public final TableField<PgReplicationOriginRecord, String> RONAME = createField(DSL.name("roname"), SQLDataType.CLOB.nullable(false), this, "");

    private PgReplicationOrigin(Name alias, Table<PgReplicationOriginRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgReplicationOrigin(Name alias, Table<PgReplicationOriginRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pg_catalog.pg_replication_origin</code> table
     * reference
     */
    public PgReplicationOrigin(String alias) {
        this(DSL.name(alias), PG_REPLICATION_ORIGIN);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_replication_origin</code> table
     * reference
     */
    public PgReplicationOrigin(Name alias) {
        this(alias, PG_REPLICATION_ORIGIN);
    }

    /**
     * Create a <code>pg_catalog.pg_replication_origin</code> table reference
     */
    public PgReplicationOrigin() {
        this(DSL.name("pg_replication_origin"), null);
    }

    public <O extends Record> PgReplicationOrigin(Table<O> child, ForeignKey<O, PgReplicationOriginRecord> key) {
        super(child, key, PG_REPLICATION_ORIGIN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public UniqueKey<PgReplicationOriginRecord> getPrimaryKey() {
        return Keys.PG_REPLICATION_ORIGIN_ROIIDENT_INDEX;
    }

    @Override
    public List<UniqueKey<PgReplicationOriginRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PG_REPLICATION_ORIGIN_RONAME_INDEX);
    }

    @Override
    public PgReplicationOrigin as(String alias) {
        return new PgReplicationOrigin(DSL.name(alias), this);
    }

    @Override
    public PgReplicationOrigin as(Name alias) {
        return new PgReplicationOrigin(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgReplicationOrigin rename(String name) {
        return new PgReplicationOrigin(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgReplicationOrigin rename(Name name) {
        return new PgReplicationOrigin(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
