/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.pg_catalog.tables;


import java.time.OffsetDateTime;

import nu.studer.sample.pg_catalog.PgCatalog;
import nu.studer.sample.pg_catalog.tables.records.PgStatAllTablesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgStatAllTables extends TableImpl<PgStatAllTablesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_stat_all_tables</code>
     */
    public static final PgStatAllTables PG_STAT_ALL_TABLES = new PgStatAllTables();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgStatAllTablesRecord> getRecordType() {
        return PgStatAllTablesRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_stat_all_tables.relid</code>.
     */
    public final TableField<PgStatAllTablesRecord, Long> RELID = createField(DSL.name("relid"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_all_tables.schemaname</code>.
     */
    public final TableField<PgStatAllTablesRecord, String> SCHEMANAME = createField(DSL.name("schemaname"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_all_tables.relname</code>.
     */
    public final TableField<PgStatAllTablesRecord, String> RELNAME = createField(DSL.name("relname"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_all_tables.seq_scan</code>.
     */
    public final TableField<PgStatAllTablesRecord, Long> SEQ_SCAN = createField(DSL.name("seq_scan"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_all_tables.seq_tup_read</code>.
     */
    public final TableField<PgStatAllTablesRecord, Long> SEQ_TUP_READ = createField(DSL.name("seq_tup_read"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_all_tables.idx_scan</code>.
     */
    public final TableField<PgStatAllTablesRecord, Long> IDX_SCAN = createField(DSL.name("idx_scan"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_all_tables.idx_tup_fetch</code>.
     */
    public final TableField<PgStatAllTablesRecord, Long> IDX_TUP_FETCH = createField(DSL.name("idx_tup_fetch"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_all_tables.n_tup_ins</code>.
     */
    public final TableField<PgStatAllTablesRecord, Long> N_TUP_INS = createField(DSL.name("n_tup_ins"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_all_tables.n_tup_upd</code>.
     */
    public final TableField<PgStatAllTablesRecord, Long> N_TUP_UPD = createField(DSL.name("n_tup_upd"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_all_tables.n_tup_del</code>.
     */
    public final TableField<PgStatAllTablesRecord, Long> N_TUP_DEL = createField(DSL.name("n_tup_del"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_all_tables.n_tup_hot_upd</code>.
     */
    public final TableField<PgStatAllTablesRecord, Long> N_TUP_HOT_UPD = createField(DSL.name("n_tup_hot_upd"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_all_tables.n_live_tup</code>.
     */
    public final TableField<PgStatAllTablesRecord, Long> N_LIVE_TUP = createField(DSL.name("n_live_tup"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_all_tables.n_dead_tup</code>.
     */
    public final TableField<PgStatAllTablesRecord, Long> N_DEAD_TUP = createField(DSL.name("n_dead_tup"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stat_all_tables.n_mod_since_analyze</code>.
     */
    public final TableField<PgStatAllTablesRecord, Long> N_MOD_SINCE_ANALYZE = createField(DSL.name("n_mod_since_analyze"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_all_tables.n_ins_since_vacuum</code>.
     */
    public final TableField<PgStatAllTablesRecord, Long> N_INS_SINCE_VACUUM = createField(DSL.name("n_ins_since_vacuum"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_all_tables.last_vacuum</code>.
     */
    public final TableField<PgStatAllTablesRecord, OffsetDateTime> LAST_VACUUM = createField(DSL.name("last_vacuum"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>pg_catalog.pg_stat_all_tables.last_autovacuum</code>.
     */
    public final TableField<PgStatAllTablesRecord, OffsetDateTime> LAST_AUTOVACUUM = createField(DSL.name("last_autovacuum"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>pg_catalog.pg_stat_all_tables.last_analyze</code>.
     */
    public final TableField<PgStatAllTablesRecord, OffsetDateTime> LAST_ANALYZE = createField(DSL.name("last_analyze"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>pg_catalog.pg_stat_all_tables.last_autoanalyze</code>.
     */
    public final TableField<PgStatAllTablesRecord, OffsetDateTime> LAST_AUTOANALYZE = createField(DSL.name("last_autoanalyze"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>pg_catalog.pg_stat_all_tables.vacuum_count</code>.
     */
    public final TableField<PgStatAllTablesRecord, Long> VACUUM_COUNT = createField(DSL.name("vacuum_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_all_tables.autovacuum_count</code>.
     */
    public final TableField<PgStatAllTablesRecord, Long> AUTOVACUUM_COUNT = createField(DSL.name("autovacuum_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_all_tables.analyze_count</code>.
     */
    public final TableField<PgStatAllTablesRecord, Long> ANALYZE_COUNT = createField(DSL.name("analyze_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_all_tables.autoanalyze_count</code>.
     */
    public final TableField<PgStatAllTablesRecord, Long> AUTOANALYZE_COUNT = createField(DSL.name("autoanalyze_count"), SQLDataType.BIGINT, this, "");

    private PgStatAllTables(Name alias, Table<PgStatAllTablesRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgStatAllTables(Name alias, Table<PgStatAllTablesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"pg_stat_all_tables\" as  SELECT c.oid AS relid,\n    n.nspname AS schemaname,\n    c.relname,\n    pg_stat_get_numscans(c.oid) AS seq_scan,\n    pg_stat_get_tuples_returned(c.oid) AS seq_tup_read,\n    (sum(pg_stat_get_numscans(i.indexrelid)))::bigint AS idx_scan,\n    ((sum(pg_stat_get_tuples_fetched(i.indexrelid)))::bigint + pg_stat_get_tuples_fetched(c.oid)) AS idx_tup_fetch,\n    pg_stat_get_tuples_inserted(c.oid) AS n_tup_ins,\n    pg_stat_get_tuples_updated(c.oid) AS n_tup_upd,\n    pg_stat_get_tuples_deleted(c.oid) AS n_tup_del,\n    pg_stat_get_tuples_hot_updated(c.oid) AS n_tup_hot_upd,\n    pg_stat_get_live_tuples(c.oid) AS n_live_tup,\n    pg_stat_get_dead_tuples(c.oid) AS n_dead_tup,\n    pg_stat_get_mod_since_analyze(c.oid) AS n_mod_since_analyze,\n    pg_stat_get_ins_since_vacuum(c.oid) AS n_ins_since_vacuum,\n    pg_stat_get_last_vacuum_time(c.oid) AS last_vacuum,\n    pg_stat_get_last_autovacuum_time(c.oid) AS last_autovacuum,\n    pg_stat_get_last_analyze_time(c.oid) AS last_analyze,\n    pg_stat_get_last_autoanalyze_time(c.oid) AS last_autoanalyze,\n    pg_stat_get_vacuum_count(c.oid) AS vacuum_count,\n    pg_stat_get_autovacuum_count(c.oid) AS autovacuum_count,\n    pg_stat_get_analyze_count(c.oid) AS analyze_count,\n    pg_stat_get_autoanalyze_count(c.oid) AS autoanalyze_count\n   FROM ((pg_class c\n     LEFT JOIN pg_index i ON ((c.oid = i.indrelid)))\n     LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace)))\n  WHERE (c.relkind = ANY (ARRAY['r'::\"char\", 't'::\"char\", 'm'::\"char\", 'p'::\"char\"]))\n  GROUP BY c.oid, n.nspname, c.relname;"));
    }

    /**
     * Create an aliased <code>pg_catalog.pg_stat_all_tables</code> table
     * reference
     */
    public PgStatAllTables(String alias) {
        this(DSL.name(alias), PG_STAT_ALL_TABLES);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_stat_all_tables</code> table
     * reference
     */
    public PgStatAllTables(Name alias) {
        this(alias, PG_STAT_ALL_TABLES);
    }

    /**
     * Create a <code>pg_catalog.pg_stat_all_tables</code> table reference
     */
    public PgStatAllTables() {
        this(DSL.name("pg_stat_all_tables"), null);
    }

    public <O extends Record> PgStatAllTables(Table<O> child, ForeignKey<O, PgStatAllTablesRecord> key) {
        super(child, key, PG_STAT_ALL_TABLES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public PgStatAllTables as(String alias) {
        return new PgStatAllTables(DSL.name(alias), this);
    }

    @Override
    public PgStatAllTables as(Name alias) {
        return new PgStatAllTables(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatAllTables rename(String name) {
        return new PgStatAllTables(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatAllTables rename(Name name) {
        return new PgStatAllTables(name, null);
    }
}
