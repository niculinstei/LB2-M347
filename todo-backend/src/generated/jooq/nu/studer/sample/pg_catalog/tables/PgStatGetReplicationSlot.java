/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.pg_catalog.tables;


import java.time.OffsetDateTime;

import nu.studer.sample.pg_catalog.PgCatalog;
import nu.studer.sample.pg_catalog.tables.records.PgStatGetReplicationSlotRecord;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgStatGetReplicationSlot extends TableImpl<PgStatGetReplicationSlotRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>pg_catalog.pg_stat_get_replication_slot</code>
     */
    public static final PgStatGetReplicationSlot PG_STAT_GET_REPLICATION_SLOT = new PgStatGetReplicationSlot();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgStatGetReplicationSlotRecord> getRecordType() {
        return PgStatGetReplicationSlotRecord.class;
    }

    /**
     * The column
     * <code>pg_catalog.pg_stat_get_replication_slot.slot_name</code>.
     */
    public final TableField<PgStatGetReplicationSlotRecord, String> SLOT_NAME = createField(DSL.name("slot_name"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stat_get_replication_slot.spill_txns</code>.
     */
    public final TableField<PgStatGetReplicationSlotRecord, Long> SPILL_TXNS = createField(DSL.name("spill_txns"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stat_get_replication_slot.spill_count</code>.
     */
    public final TableField<PgStatGetReplicationSlotRecord, Long> SPILL_COUNT = createField(DSL.name("spill_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stat_get_replication_slot.spill_bytes</code>.
     */
    public final TableField<PgStatGetReplicationSlotRecord, Long> SPILL_BYTES = createField(DSL.name("spill_bytes"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stat_get_replication_slot.stream_txns</code>.
     */
    public final TableField<PgStatGetReplicationSlotRecord, Long> STREAM_TXNS = createField(DSL.name("stream_txns"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stat_get_replication_slot.stream_count</code>.
     */
    public final TableField<PgStatGetReplicationSlotRecord, Long> STREAM_COUNT = createField(DSL.name("stream_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stat_get_replication_slot.stream_bytes</code>.
     */
    public final TableField<PgStatGetReplicationSlotRecord, Long> STREAM_BYTES = createField(DSL.name("stream_bytes"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stat_get_replication_slot.total_txns</code>.
     */
    public final TableField<PgStatGetReplicationSlotRecord, Long> TOTAL_TXNS = createField(DSL.name("total_txns"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stat_get_replication_slot.total_bytes</code>.
     */
    public final TableField<PgStatGetReplicationSlotRecord, Long> TOTAL_BYTES = createField(DSL.name("total_bytes"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stat_get_replication_slot.stats_reset</code>.
     */
    public final TableField<PgStatGetReplicationSlotRecord, OffsetDateTime> STATS_RESET = createField(DSL.name("stats_reset"), SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    private PgStatGetReplicationSlot(Name alias, Table<PgStatGetReplicationSlotRecord> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, SQLDataType.CLOB)
        });
    }

    private PgStatGetReplicationSlot(Name alias, Table<PgStatGetReplicationSlotRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased <code>pg_catalog.pg_stat_get_replication_slot</code>
     * table reference
     */
    public PgStatGetReplicationSlot(String alias) {
        this(DSL.name(alias), PG_STAT_GET_REPLICATION_SLOT);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_stat_get_replication_slot</code>
     * table reference
     */
    public PgStatGetReplicationSlot(Name alias) {
        this(alias, PG_STAT_GET_REPLICATION_SLOT);
    }

    /**
     * Create a <code>pg_catalog.pg_stat_get_replication_slot</code> table
     * reference
     */
    public PgStatGetReplicationSlot() {
        this(DSL.name("pg_stat_get_replication_slot"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public PgStatGetReplicationSlot as(String alias) {
        return new PgStatGetReplicationSlot(DSL.name(alias), this, parameters);
    }

    @Override
    public PgStatGetReplicationSlot as(Name alias) {
        return new PgStatGetReplicationSlot(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatGetReplicationSlot rename(String name) {
        return new PgStatGetReplicationSlot(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatGetReplicationSlot rename(Name name) {
        return new PgStatGetReplicationSlot(name, null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<String, Long, Long, Long, Long, Long, Long, Long, Long, OffsetDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public PgStatGetReplicationSlot call(
          String slotName
    ) {
        PgStatGetReplicationSlot result = new PgStatGetReplicationSlot(DSL.name("pg_stat_get_replication_slot"), null, new Field[] {
            DSL.val(slotName, SQLDataType.CLOB)
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public PgStatGetReplicationSlot call(
          Field<String> slotName
    ) {
        PgStatGetReplicationSlot result = new PgStatGetReplicationSlot(DSL.name("pg_stat_get_replication_slot"), null, new Field[] {
            slotName
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
