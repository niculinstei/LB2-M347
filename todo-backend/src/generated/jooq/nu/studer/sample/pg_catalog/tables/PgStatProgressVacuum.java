/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.pg_catalog.tables;


import nu.studer.sample.pg_catalog.PgCatalog;
import nu.studer.sample.pg_catalog.tables.records.PgStatProgressVacuumRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgStatProgressVacuum extends TableImpl<PgStatProgressVacuumRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_stat_progress_vacuum</code>
     */
    public static final PgStatProgressVacuum PG_STAT_PROGRESS_VACUUM = new PgStatProgressVacuum();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgStatProgressVacuumRecord> getRecordType() {
        return PgStatProgressVacuumRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_stat_progress_vacuum.pid</code>.
     */
    public final TableField<PgStatProgressVacuumRecord, Integer> PID = createField(DSL.name("pid"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_progress_vacuum.datid</code>.
     */
    public final TableField<PgStatProgressVacuumRecord, Long> DATID = createField(DSL.name("datid"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_progress_vacuum.datname</code>.
     */
    public final TableField<PgStatProgressVacuumRecord, String> DATNAME = createField(DSL.name("datname"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_progress_vacuum.relid</code>.
     */
    public final TableField<PgStatProgressVacuumRecord, Long> RELID = createField(DSL.name("relid"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_progress_vacuum.phase</code>.
     */
    public final TableField<PgStatProgressVacuumRecord, String> PHASE = createField(DSL.name("phase"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_vacuum.heap_blks_total</code>.
     */
    public final TableField<PgStatProgressVacuumRecord, Long> HEAP_BLKS_TOTAL = createField(DSL.name("heap_blks_total"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_vacuum.heap_blks_scanned</code>.
     */
    public final TableField<PgStatProgressVacuumRecord, Long> HEAP_BLKS_SCANNED = createField(DSL.name("heap_blks_scanned"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_vacuum.heap_blks_vacuumed</code>.
     */
    public final TableField<PgStatProgressVacuumRecord, Long> HEAP_BLKS_VACUUMED = createField(DSL.name("heap_blks_vacuumed"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_vacuum.index_vacuum_count</code>.
     */
    public final TableField<PgStatProgressVacuumRecord, Long> INDEX_VACUUM_COUNT = createField(DSL.name("index_vacuum_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_vacuum.max_dead_tuples</code>.
     */
    public final TableField<PgStatProgressVacuumRecord, Long> MAX_DEAD_TUPLES = createField(DSL.name("max_dead_tuples"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_vacuum.num_dead_tuples</code>.
     */
    public final TableField<PgStatProgressVacuumRecord, Long> NUM_DEAD_TUPLES = createField(DSL.name("num_dead_tuples"), SQLDataType.BIGINT, this, "");

    private PgStatProgressVacuum(Name alias, Table<PgStatProgressVacuumRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgStatProgressVacuum(Name alias, Table<PgStatProgressVacuumRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"pg_stat_progress_vacuum\" as  SELECT s.pid,\n    s.datid,\n    d.datname,\n    s.relid,\n        CASE s.param1\n            WHEN 0 THEN 'initializing'::text\n            WHEN 1 THEN 'scanning heap'::text\n            WHEN 2 THEN 'vacuuming indexes'::text\n            WHEN 3 THEN 'vacuuming heap'::text\n            WHEN 4 THEN 'cleaning up indexes'::text\n            WHEN 5 THEN 'truncating heap'::text\n            WHEN 6 THEN 'performing final cleanup'::text\n            ELSE NULL::text\n        END AS phase,\n    s.param2 AS heap_blks_total,\n    s.param3 AS heap_blks_scanned,\n    s.param4 AS heap_blks_vacuumed,\n    s.param5 AS index_vacuum_count,\n    s.param6 AS max_dead_tuples,\n    s.param7 AS num_dead_tuples\n   FROM (pg_stat_get_progress_info('VACUUM'::text) s(pid, datid, relid, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20)\n     LEFT JOIN pg_database d ON ((s.datid = d.oid)));"));
    }

    /**
     * Create an aliased <code>pg_catalog.pg_stat_progress_vacuum</code> table
     * reference
     */
    public PgStatProgressVacuum(String alias) {
        this(DSL.name(alias), PG_STAT_PROGRESS_VACUUM);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_stat_progress_vacuum</code> table
     * reference
     */
    public PgStatProgressVacuum(Name alias) {
        this(alias, PG_STAT_PROGRESS_VACUUM);
    }

    /**
     * Create a <code>pg_catalog.pg_stat_progress_vacuum</code> table reference
     */
    public PgStatProgressVacuum() {
        this(DSL.name("pg_stat_progress_vacuum"), null);
    }

    public <O extends Record> PgStatProgressVacuum(Table<O> child, ForeignKey<O, PgStatProgressVacuumRecord> key) {
        super(child, key, PG_STAT_PROGRESS_VACUUM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public PgStatProgressVacuum as(String alias) {
        return new PgStatProgressVacuum(DSL.name(alias), this);
    }

    @Override
    public PgStatProgressVacuum as(Name alias) {
        return new PgStatProgressVacuum(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatProgressVacuum rename(String name) {
        return new PgStatProgressVacuum(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatProgressVacuum rename(Name name) {
        return new PgStatProgressVacuum(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, Long, String, Long, String, Long, Long, Long, Long, Long, Long> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
